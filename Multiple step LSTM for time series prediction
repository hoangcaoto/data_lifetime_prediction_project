# -*- coding: utf-8 -*-
"""
Created on Thu Apr  4 16:07:46 2019

@author: hoangd
"""
import pandas as pd
import numpy as np
import matplotlib as plt
from pandas import DataFrame
from pandas import Series
from pandas import concat
from pandas import read_csv
from pandas import datetime
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from math import sqrt
from matplotlib import pyplot
from numpy import array


#de début et fin des cycles 2,3,4,5,6​

cycle_2_start_date=pd.Timestamp('2008-12-08') 
cycle_2_end_date=pd.Timestamp('2011-06-02') 
cycle_2_date_range = pd.date_range(start=cycle_2_start_date, end=cycle_2_end_date)
cycle_3_start_date=pd.Timestamp('2011-06-03') 
cycle_3_end_date=pd.Timestamp('2013-03-18')
cycle_3_date_range=pd.date_range(start=cycle_3_start_date, end=cycle_3_end_date) 
cycle_4_start_date=pd.Timestamp('2013-03-19')
cycle_4_end_date=pd.Timestamp('2015-09-17')
cycle_4_date_range=pd.date_range(start=cycle_4_start_date, end=cycle_4_end_date)
cycle_5_start_date=pd.Timestamp('2015-09-20') 
cycle_5_end_date=pd.Timestamp('2018-01-31') 
cycle_5_date_range = pd.date_range(start=cycle_5_start_date, end=cycle_5_end_date)
cycle_6_start_date=pd.Timestamp('2018-02-20') 
cycle_6_end_date=pd.Timestamp('2018-05-21') 
cycle_6_date_range = pd.date_range(start=cycle_6_start_date, end=cycle_6_end_date)

 
# =============================================================================
# # date-time parsing function for loading the dataset
# def parser(x):
# 	return datetime.strptime('190'+x, '%Y-%m')
#  
# =============================================================================
# convert time series into supervised learning problem
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
	n_vars = 1 if type(data) is list else data.shape[1]
	df = DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(df.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(df.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = concat(cols, axis=1)
	agg.columns = names
	# drop rows with NaN values
	if dropnan:
		agg.dropna(inplace=True)
	return agg
 
# create a differenced series
def difference(dataset, interval=1):
	diff = list()
	for i in range(interval, len(dataset)):
		value = dataset[i] - dataset[i - interval]
		diff.append(value)
	return Series(diff)
 
# transform series into train and test sets for supervised learning
def prepare_data(series, n_test, n_lag, n_seq):
	# extract raw values
	raw_values = series.values
	# transform data to be stationary
	diff_series = difference(raw_values, 1)
	diff_values = diff_series.values
	diff_values = diff_values.reshape(len(diff_values), 1)
	# rescale values to -1, 1
	scaler = MinMaxScaler(feature_range=(-1, 1))
	scaled_values = scaler.fit_transform(diff_values)
	scaled_values = scaled_values.reshape(len(scaled_values), 1)
	# transform into supervised learning problem X, y
	supervised = series_to_supervised(scaled_values, n_lag, n_seq)
	supervised_values = supervised.values
	# split into train and test sets
	train, test = supervised_values[0:-n_test], supervised_values[-n_test:]
	return scaler, train, test
 
# fit an LSTM network to training data
def fit_lstm(train, n_lag, n_seq, n_batch, nb_epoch, n_neurons):
	# reshape training into [samples, timesteps, features]
	X, y = train[:, 0:n_lag], train[:, n_lag:]
	X = X.reshape(X.shape[0], 1, X.shape[1])
	# design network
	model = Sequential()
	model.add(LSTM(n_neurons, batch_input_shape=(n_batch, X.shape[1], X.shape[2]), stateful=True))
	model.add(Dense(y.shape[1]))
	model.compile(loss='mean_squared_error', optimizer='adam')
	# fit network
	for i in range(nb_epoch):
		model.fit(X, y, epochs=1, batch_size=n_batch, verbose=0, shuffle=False)
		model.reset_states()
	return model
 
# make one forecast with an LSTM,
def forecast_lstm(model, X, n_batch):
	# reshape input pattern to [samples, timesteps, features]
	X = X.reshape(1, 1, len(X))
	# make forecast
	forecast = model.predict(X, batch_size=n_batch)
	# convert to array
	return [x for x in forecast[0, :]]
 
# evaluate the persistence model
def make_forecasts(model, n_batch, train, test, n_lag, n_seq):
	forecasts = list()
	for i in range(len(test)):
		X, y = test[i, 0:n_lag], test[i, n_lag:]
		# make forecast
		forecast = forecast_lstm(model, X, n_batch)
		# store the forecast
		forecasts.append(forecast)
	return forecasts
 
# invert differenced forecast
def inverse_difference(last_ob, forecast):
	# invert first forecast
	inverted = list()
	inverted.append(forecast[0] + last_ob)
	# propagate difference forecast using inverted first value
	for i in range(1, len(forecast)):
		inverted.append(forecast[i] + inverted[i-1])
	return inverted
 
# inverse data transform on forecasts
def inverse_transform(series, forecasts, scaler, n_test):
	inverted = list()
	for i in range(len(forecasts)):
		# create array from forecast
		forecast = array(forecasts[i])
		forecast = forecast.reshape(1, len(forecast))
		# invert scaling
		inv_scale = scaler.inverse_transform(forecast)
		inv_scale = inv_scale[0, :]
		# invert differencing
		index = len(series) - n_test + i - 1
		last_ob = series.values[index]
		inv_diff = inverse_difference(last_ob, inv_scale)
		# store
		inverted.append(inv_diff)
	return inverted
 
# evaluate the RMSE for each forecast time step
def evaluate_forecasts(test, forecasts, n_lag, n_seq):
	for i in range(n_seq):
		actual = [row[i] for row in test]
		predicted = [forecast[i] for forecast in forecasts]
		rmse = sqrt(mean_squared_error(actual, predicted))
		print('t+%d RMSE: %f' % ((i+1), rmse))
 
# plot the forecasts in the context of the original dataset
def plot_forecasts(series, forecasts, n_test):
	# plot the entire dataset in blue
	pyplot.plot(series.values)
	# plot the forecasts in red
	for i in range(len(forecasts)):
		off_s = len(series) - n_test + i - 1
		off_e = off_s + len(forecasts[i]) + 1
		xaxis = [x for x in range(off_s, off_e)]
		yaxis = [series.values[off_s]] + forecasts[i]
		pyplot.plot(xaxis, yaxis, color='red')
	# show the plot
   #pyplot.subplot(figsize = (24,24)) 
	pyplot.show()
 
# load dataset
#series = read_csv('C:/Users/hoangd/Downloads/sales-of-shampoo-over-a-three-ye.csv', header=0, nrows=36, parse_dates=[0], index_col=0, squeeze=True, date_parser=parser)
series = read_csv('C:/Users/hoangd/Desktop/Projet_Kiwi-master/visualition/imputed_data.csv', header = [0,1], index_col = 0, parse_dates=True)
series = series['PROCESS_CORR_k0']
# Mask Cycle
mask_Cycle2 = (series.index >= cycle_2_start_date) & (series.index <= cycle_2_end_date)
mask_Cycle3 = (series.index >= cycle_3_start_date) & (series.index <= cycle_3_end_date)
mask_Cycle4 = (series.index >= cycle_4_start_date) & (series.index <= cycle_4_end_date)
mask_Cycle5 = (series.index >= cycle_5_start_date) & (series.index <= cycle_5_end_date)
mask_Cycle6 = (series.index >= cycle_6_start_date) & (series.index <= cycle_6_end_date)

series_Cycle2=series.loc[mask_Cycle2].copy()
series_Cycle3=series.loc[mask_Cycle3].copy()
series_Cycle4=series.loc[mask_Cycle4].copy()
series_Cycle5=series.loc[mask_Cycle5].copy()
series_Cycle6=series.loc[mask_Cycle6].copy()

#train5 = series_Cycle5[:int(0.7*len(series_Cycle5))]
#test5 = series_Cycle5[int(0.7*len(series_Cycle5)):]
#test5.rename({'Unnamed: 38_level_1':'True Test'},axis=1)

# configure
n_lag = 70
#n_seq = len(series_Cycle5) - int(0.7*len(series_Cycle5))
n_test = 1
n_epochs = 100
n_batch = 1
n_neurons = 240

for series_Cycle in [#series_Cycle2
                     #series_Cycle3
                     series_Cycle4
                     #series_Cycle5
                     ]:

    train_Cycle = series_Cycle[:int(0.7*len(series_Cycle))]
    test_Cycle = series_Cycle[int(0.7*len(series_Cycle)):]
    test_Cycle = test_Cycle.rename({'Unnamed: 38_level_1':'True Test'},axis=1)
    n_seq = len(series_Cycle) - int(0.7*len(series_Cycle))    
    # prepare data
    scaler, train, test = prepare_data(train_Cycle, n_test, n_lag, n_seq)
    # fit model
    model = fit_lstm(train, n_lag, n_seq, n_batch, n_epochs, n_neurons)
    # make forecasts
    forecasts = make_forecasts(model, n_batch, train, test, n_lag, n_seq)
    # inverse transform forecasts and test
    forecasts = inverse_transform(train_Cycle, forecasts, scaler, n_test+2)
    #forecasts = pd.DataFrame(forecasts, index = test5.index,columns=['Predicted Test'])
    actual = [row[n_lag:] for row in test]
    actual = inverse_transform(train_Cycle, actual, scaler, n_test+2)
    # evaluate forecasts
    evaluate_forecasts(actual, forecasts, n_lag, n_seq)
    # plot forecasts
    plot_forecasts(train_Cycle, forecasts, n_test+2)
    
    forecasts = np.ravel(forecasts)
    forecasts = pd.DataFrame(forecasts, index = test_Cycle.index,columns=['Predicted Test'])
    
    pd.concat([test_Cycle,forecasts],axis=1).plot(figsize=(24,24))
    print("The RMSE score:", np.sqrt(mean_squared_error(test_Cycle, forecasts)))
